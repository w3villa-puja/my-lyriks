"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateComponentFromPath = exports.generateComponent = exports.getIcon = exports.getCollection = exports.resolveIconsPath = exports.normalizeIconPath = exports.isIconPath = void 0;
// @ts-ignore
const json_tools_1 = require("@iconify/json-tools");
const url_1 = require("url");
const compile_1 = require("./compile");
const constants_1 = require("./constants");
const iconPathRE = new RegExp(`${constants_1.URL_PREFIXES.map(v => `^${v}`).join('|')}`);
function isIconPath(path) {
    return iconPathRE.test(path);
}
exports.isIconPath = isIconPath;
function normalizeIconPath(path) {
    return path.replace(iconPathRE, constants_1.URL_PREFIXES[0]);
}
exports.normalizeIconPath = normalizeIconPath;
function resolveIconsPath(path) {
    if (!isIconPath(path))
        return null;
    path = path.replace(iconPathRE, '');
    const query = {};
    const queryIndex = path.indexOf('?');
    if (queryIndex !== -1) {
        const queryRaw = path.slice(queryIndex + 1);
        path = path.slice(0, queryIndex);
        new url_1.URLSearchParams(queryRaw).forEach((value, key) => {
            query[value] = key;
        });
    }
    const [collection, icon] = path.split('/');
    return {
        collection,
        icon,
        query,
    };
}
exports.resolveIconsPath = resolveIconsPath;
const _collections = {};
const _idTransforms = [
    str => str,
    str => str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase(),
    str => str.replace(/([a-z])(\d+)/g, '$1-$2'),
];
function getCollection(name) {
    if (!_collections[name]) {
        const collection = new json_tools_1.Collection();
        collection.loadIconifyCollection(name);
        _collections[name] = collection;
    }
    return _collections[name];
}
exports.getCollection = getCollection;
function getIcon(name, icon) {
    const collection = getCollection(name);
    if (!collection)
        return null;
    let data;
    for (const trans of _idTransforms) {
        data = collection.getIconData(trans(icon));
        if (data)
            return data;
    }
    return null;
}
exports.getIcon = getIcon;
async function generateComponent({ collection: name, icon }, options) {
    const { scale, defaultStyle, defaultClass } = options;
    const data = getIcon(name, icon);
    const svg = new json_tools_1.SVG(data);
    const svgText = svg.getSVG({
        height: `${scale}em`,
        width: `${scale}em`,
        style: defaultStyle,
    });
    if (!svgText) {
        return null;
    }
    return compile_1.compile(svgText, name, icon, { className: defaultClass });
}
exports.generateComponent = generateComponent;
async function generateComponentFromPath(path, options) {
    const resolved = resolveIconsPath(path);
    if (!resolved) {
        return null;
    }
    return generateComponent(resolved, options);
}
exports.generateComponentFromPath = generateComponentFromPath;
